---
- hosts: all
  remote_user: vagrant
  sudo: true
  vars:
    - config_hosts: true
  tasks:
    - name: updating /etc/hosts in case of dns lookup issues
      lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_eth1.ipv4.address }} {{ item }}" state=present
      with_items: groups['all']
      when: config_hosts is defined and config_hosts

    - name: installing common packages
      apt: name={{ item }} state=present
      with_items:
        - git
        - mysql-client

- hosts: load-balancers
  remote_user: vagrant
  sudo: true
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
  vars:
    - config_keepalived: true
    - disable_default_nginx_site: true
    - keepalived_vip: 192.168.250.100
    - keepalived_vip_int: eth1
    - load_balancer_configs:
        - name: mysql
          load_balancing_method: least_conn ##least_conn, least_time or hash
          protocol: tcp
          backend_port: 3306
          frontend_port: 3306
          backend_servers:
           - mysql-1
           - mysql-2
        - name: nginx
          load_balancing_method: round_robin
          protocol: http
          backend_port: 80
          frontend_port: 80
          backend_servers:
            - web-1
            - web-2
          server_name: "{{ ansible_hostname }}"
          location: /
#        - name: elasticsearch
#          load_balancing_method: least_conn ##least_conn, least_time or hash
#          protocol: tcp
#          backend_port: 9200
#          frontend_port: 9200
#          backend_servers:
#            - es-1
#            - es-2
    - nginx_branch: development
  roles:
    - mrlesmithjr.keepalived
    - mrlesmithjr.nginx
  tasks:
    - name: adding nginx repo
      apt_repository: repo='ppa:nginx/{{ nginx_branch }}' state=present

    - name: upgrading nginx
      apt: name=nginx state=latest

    - name: configuring nginx for tcp load balancing
      template: src=templates/etc/nginx/nginx.conf.j2 dest=/etc/nginx/nginx.conf
      notify: restart nginx

    - name: ensuring nginx stream.d folder exists
      file: path=/etc/nginx/stream.d state=directory

    - name: configuring nginx load balancer (TCP) configs
      template: src=templates/etc/nginx/stream.d/streams.conf.j2 dest=/etc/nginx/stream.d/{{ item.name }}.conf
      notify: restart nginx
      with_items: load_balancer_configs
      when: load_balancer_configs is defined and item.protocol == "tcp"

    - name: configuring nginx load balancer (HTTP) configs
      template: src=templates/etc/nginx/conf.d/http.conf.j2 dest=/etc/nginx/conf.d/{{ item.name }}.conf
      notify: restart nginx
      with_items: load_balancer_configs
      when: load_balancer_configs is defined and item.protocol == "http"

    - name: disabling NGINX default web site
      file: dest=/etc/nginx/sites-enabled/default state=absent
      notify: restart nginx
      when: disable_default_nginx_site is defined and disable_default_nginx_site

- hosts: mysql-nodes
  remote_user: vagrant
  sudo: true
  vars:
    - mysql_accounts:
        - name: "{{ mysql_replication_user }}"
          pass: "{{ mysql_replication_pass }}"
        - name: "{{ mysql_test_user }}"
          pass: "{{ mysql_test_pass }}"
        - name: "{{ wordpress_db_user }}"
          pass: "{{ wordpress_db_user_pass }}"
    - mysql_master: mysql-1
    - mysql_replication_dbs:
        - test
        - test1
        - test2
        - "{{ wordpress_db }}"
    - mysql_replication_user: replicator
    - mysql_replication_pass: replication
    - mysql_server_replication: true
    - mysql_slave: mysql-2
    - mysql_test_user: lbtest
    - mysql_test_pass: lbtest
    - wordpress_db: wordpress
    - wordpress_db_user: wordpress
    - wordpress_db_user_pass: wordpress
  handlers:
    - name: restart mysql
      service: name=mysql state=restarted
  roles:
    - mrlesmithjr.mysql
  tasks:
    - name: checking if cluster is configured
      stat: path=/etc/mysql/clustered
      register: clustered

    - name: creating mysql users
      mysql_user: name={{ item.name }} password={{ item.pass }} priv=*.*:ALL state=present host=%
      with_items: mysql_accounts

    - name: configuring mysql
      template: src=templates/etc/mysql/my.cnf.j2 dest=/etc/mysql/my.cnf owner=root group=root mode=0644
      register: mysql_configured

    - name: restarting mysql
      service: name=mysql state=restarted
      when: mysql_configured.changed

    - name: finding master log position
      mysql_replication: mode=getmaster
      register: master
      delegate_to: "{{ mysql_master }}"
      when: not clustered.stat.exists

    - name: finding slave log position
      mysql_replication: mode=getmaster
      register: slave
      delegate_to: "{{ mysql_slave }}"
      when: not clustered.stat.exists

    - name: stopping slave on slave
      mysql_replication: mode=stopslave
      when: not clustered.stat.exists

    - name: configuring replication on slave
      mysql_replication: mode=changemaster master_host={{ mysql_master }} master_log_file={{ master.File }} master_log_pos={{ master.Position }} master_user={{ mysql_replication_user }} master_password={{ mysql_replication_pass }}
      when: mysql_master is defined and inventory_hostname == "{{ mysql_slave }}" and not clustered.stat.exists

    - name: configuring replication on master
      mysql_replication: mode=changemaster master_host={{ mysql_slave }} master_log_file={{ slave.File }} master_log_pos={{ slave.Position }} master_user={{ mysql_replication_user }} master_password={{ mysql_replication_pass }}
      when: mysql_slave is defined and inventory_hostname == "{{ mysql_master }}" and not clustered.stat.exists

    - name: creating mysql dbs
      mysql_db: name={{ item }} state=present
      with_items: mysql_replication_dbs
      when: mysql_master is defined and inventory_hostname == "{{ mysql_master }}"

    - name: marking cluster as configured
      file: path=/etc/mysql/clustered state=touch
      when: not clustered.stat.exists

- hosts: web-servers
  remote_user: vagrant
  sudo: true
  vars:
    - disable_default_nginx_site: true
    - keepalived_vip: 192.168.250.100
    - mysql_master: mysql-1
    - nginx_default_root: /usr/share/nginx/html
      # Disable All Updates
        # By default automatic updates are enabled, set this value to true to disable all automatic updates
    - wordpress_auto_up_disable: false
      #Define Core Update Level
        #true  = Development, minor, and major updates are all enabled
        #false = Development, minor, and major updates are all disabled
        #minor = Minor updates are enabled, development, and major updates are disabled
    - wordpress_core_update_level: true
    - wordpress_db_server: "{{ keepalived_vip }}"
    - wordpress_default_root: "{{ nginx_default_root }}/wordpress"
    - wordpress_package: http://wordpress.org/latest.tar.gz
    - wordpress_db: wordpress
    - wordpress_db_user: wordpress
    - wordpress_db_user_pass: wordpress
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
  roles:
    - mrlesmithjr.nginx
  tasks:
    - name: installing pre-req packages
      apt: name={{ item }} state=present
      with_items:
        - mcrypt
        - php5
        - php5-cgi
        - php5-fpm
        - php5-mysql

    - name: configuring default web page to validate load-balancers
      template: src=templates/usr/share/nginx/html/index.html.j2 dest="{{ nginx_default_root }}/index.html"

    - name: downloading wordpress package
      get_url: url={{ wordpress_package }} dest="{{ nginx_default_root }}/wordpress.tar.gz"

    - name: extracting wordpress package
      unarchive: src="{{ nginx_default_root }}/wordpress.tar.gz" dest="{{ nginx_default_root }}/" creates="{{ wordpress_default_root }}/index.php"

    - name: disabling NGINX default web site
      file: dest=/etc/nginx/sites-enabled/default state=absent
      notify: restart nginx
      when: disable_default_nginx_site is defined and disable_default_nginx_site

    - name: Fetch random salts for WordPress config
      local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
      register: wp_salt
      sudo: no

    - name: configuring wordpress site
      template: src=templates/etc/nginx/conf.d/default.conf.j2 dest=/etc/nginx/conf.d/default.conf
      notify: restart nginx

    - name: configuring wordpress
      template: src=templates/usr/share/nginx/html/wordpress/wp-config.php.j2 dest="{{ wordpress_default_root }}/wp-config.php" owner=www-data group=www-data

    - name: changing ownership of wordpress root folder
      file: dest={{ wordpress_default_root }} state=directory owner=www-data group=www-data recurse=yes
